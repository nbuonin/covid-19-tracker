{"version":3,"sources":["components/Nav.tsx","components/Map.tsx","components/Sidebar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Nav","Navbar","bg","variant","fixed","Brand","Map","countyData","maxCases","maxCasesPerT","maxDeaths","maxDeathsPerT","maxDeathsPerCase","activeCounty","setActiveCounty","mappedData","useState","countyHoverData","setCountyHoverData","countyLayer","GeoJsonLayer","id","data","pickable","stroked","filled","getFillColor","feature","properties","CASES","idx","length","datum","shadePct","cases","casesPerThousand","deaths","deathsPerThousand","deathsPerCase","alphaChannel","GEOID","getLineColor","getLineWidth","onHover","info","event","x","y","hoveredObject","object","onClick","className","layers","initialViewState","latitude","longitude","zoom","bearing","pitch","width","height","controller","reuseMaps","preventStyleDiffing","mapStyle","mapboxApiAccessToken","style","top","left","position","pointerEvents","NAME","toFixed","renderTooltip","Sidebar","latestDatum","graphData","reduce","acc","val","push","date","toLocaleDateString","month","day","timeZone","county","state","population","theme","VictoryTheme","material","label","dependentAxis","padding","bottom","tickCount","href","MapDataControls","setMappedData","handleMapDataOption","e","target","value","type","name","checked","onChange","htmlFor","MapContainer","setCountyData","fipsToCases","setFipsToCases","setMaxCases","setMaxCasesPerT","setMaxDeaths","setMaxDeathsPerT","setMaxDeathsPerCase","ratePerThousand","useEffect","NYC","a","fetch","cResponse","ok","Error","json","cData","vResponse","text","vCsvString","Papa","parse","header","errors","meta","censusResponse","censusCsvString","censusData","censusLookupTable","Number","POPESTIMATE2019","_maxCases","_maxCasesPerThousand","_maxDeaths","_maxDeathsPerThousand","_maxDeathsPerCase","fipsToCasesTable","fips","d","Date","findIndex","el","splice","annotatedFeatures","features","map","includes","getData","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ab161f25.chunk.js","sourcesContent":["import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\n\nconst Nav = () => {\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\" fixed=\"top\">\n            <Navbar.Brand>US County COVID-19 Tracker</Navbar.Brand>\n        </Navbar>\n    )\n}\n\nexport default Nav;\n","import React, { useState } from 'react';\n// Mapbox and ReactMap bindings\nimport { StaticMap } from 'react-map-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport {GeoJSON} from 'geojson';\n\n// Deck.gl\nimport DeckGL from '@deck.gl/react';\nimport { GeoJsonLayer } from '@deck.gl/layers';\nimport { RGBAColor  } from \"@deck.gl/aggregation-layers/utils/color-utils\";\n\nimport {MappedData} from '../App';\n\nconst TOKEN = 'pk.eyJ1IjoibmJ1b25pbiIsImEiOiJjazhvaHdqMm4xOWI3M21tdzZwaGk1MTIyIn0.3b86Z8DJe70ypDfzIyAjpA';\n\n\n// TODO: Type GeoJSON\ntype MapProps = {\n    countyData: any,\n    maxCases: number,\n    maxCasesPerT: number,\n    maxDeaths: number,\n    maxDeathsPerT: number,\n    maxDeathsPerCase: number,\n    activeCounty: string | undefined,\n    setActiveCounty: React.Dispatch<React.SetStateAction<string | undefined>>,\n    mappedData: MappedData\n}\nconst Map = ({\n    countyData, maxCases, maxCasesPerT, maxDeaths, maxDeathsPerT, maxDeathsPerCase, activeCounty, setActiveCounty, mappedData}: MapProps) => {\n\n    const viewportState = {\n            viewport: {\n                latitude: 40,\n                longitude: -100,\n                zoom: 3,\n                bearing: 0,\n                pitch: 0\n            }\n    };\n\n    const [countyHoverData, setCountyHoverData] = useState();\n    const renderTooltip = () => {\n        const {x, y, hoveredObject} = countyHoverData;\n        let datum = null;\n        if (hoveredObject && hoveredObject.properties.CASES) {\n            let idx = hoveredObject.properties.CASES.length - 1;\n            datum = hoveredObject.properties.CASES[idx];\n        }\n        return (\n            hoveredObject && (\n                <div className={\"county-tooltip\"}\n                    style={{top: y, left: x, position: 'absolute', pointerEvents: 'none'}}>\n                    <div className=\"tooltip-inner\">\n                        {hoveredObject.properties.NAME}\n                        <table className={\"county-tooltip__table\"}>\n                            <tbody>\n                                <tr>\n                                    <td>Cases:</td>\n                                    <td>{datum ? datum.cases : '0'}</td>\n                                </tr>\n                                <tr>\n                                    <td>Cases/1k:</td>\n                                    <td>{datum ? datum.casesPerThousand.toFixed(2) : '0'}</td>\n                                </tr>\n                                <tr>\n                                    <td>Deaths:</td>\n                                    <td>{datum ? datum.deaths : '0'}</td>\n                                </tr>\n                                <tr>\n                                    <td>Deaths/1k:</td>\n                                    <td>{datum ? datum.deathsPerThousand.toFixed(2) : '0'}</td>\n                                </tr>\n                                <tr>\n                                    <td>Fatality Rate:</td>\n                                    <td>{datum ? (datum.deathsPerCase * 100).toFixed(2) : '0'}%</td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            )\n        )\n    }\n\n    const onCountyHover = (info: any, event: any) => {\n        setCountyHoverData({x: info.x, y: info.y, hoveredObject: info.object});\n    }\n\n    const onCountyClick = (info: any, event: any) => {\n        setActiveCounty(info.object.properties.GEOID);\n    }\n\n    const getCountyFill = (feature: any): RGBAColor => {\n        if (feature.properties.CASES) {\n            let idx = feature.properties.CASES.length - 1;\n            let datum = feature.properties.CASES[idx];\n            let shadePct = 0;\n            if (mappedData === 'cases') {\n                shadePct = datum.cases / maxCases;\n            } else if (mappedData === 'casesPerK') {\n                shadePct = datum.casesPerThousand / maxCasesPerT;\n            } else if (mappedData === 'deaths') {\n                shadePct = datum.deaths / maxDeaths;\n            } else if (mappedData === 'deathsPerK') {\n                shadePct = datum.deathsPerThousand / maxDeathsPerT;\n            } else if (mappedData === 'deathsPerCase') {\n                shadePct = datum.deathsPerCase / maxDeathsPerCase;\n            }\n\n            let offset = 25;\n            let alphaChannel = shadePct ? (shadePct * (255 - offset)) + offset : 0;\n            if (feature.properties.GEOID === activeCounty) {\n                return [0, 0, 0, 127];\n            }\n            // sea 202 210 211 cad2d3\n            // land 240 240 239 f0f0ef\n\n            // Lighter, best guess\n            // return [92, 86, 136, alphaChannel];\n            // Triadic of above land and sea colors\n            // return [163, 161, 147, alphaChannel];\n            // Complement of the triadic\n            return [65, 61, 87, alphaChannel];\n        }\n        return [0, 0, 0, 0];\n    }\n\n    const getCountyLineColor = (feature: any): RGBAColor => {\n        return [0, 0, 0, 255];\n    }\n\n    const getCountyLineWidth = (feature: any): number => {\n        if (feature.properties.GEOID === activeCounty) {\n            return 400;\n        }\n        return 150;\n    }\n\n    const countyLayer = new GeoJsonLayer({\n        id: 'county-' + activeCounty + mappedData,\n        data: countyData,\n        pickable: true,\n        stroked: true,\n        filled: true,\n        getFillColor: getCountyFill,\n        getLineColor: getCountyLineColor,\n        getLineWidth: getCountyLineWidth, \n        onHover: onCountyHover,\n        onClick: onCountyClick\n    });\n\n    return (\n        <div className=\"sidebar-sticky\">\n        <DeckGL\n            layers={[countyLayer]}\n            initialViewState={viewportState.viewport}\n            width={'100%'}\n            height={'100%'}\n            controller={true}>\n            <StaticMap\n                reuseMaps\n                width={'100%'}\n                height={'100%'}\n                preventStyleDiffing={true}\n                mapStyle='mapbox://styles/mapbox/light-v9'\n                mapboxApiAccessToken={TOKEN} />\n        </DeckGL>\n        {countyHoverData && renderTooltip()}\n        </div>\n    )\n}\n\nexport default Map;\n","import React from 'react';\nimport {VictoryTheme, VictoryChart, VictoryBar, VictoryAxis} from 'victory';\n\n// TODO: type countyData\ntype SidebarProps = {\n    countyData: any\n}\n\nconst Sidebar = ({countyData}: SidebarProps) => {\n    let latestDatum = null;\n    let graphData = null;\n    if (countyData) {\n        latestDatum = countyData[countyData.length - 1];\n        graphData = countyData.reduce((acc: any, val: any) => {\n            acc.push({\n                date: val.date.toLocaleDateString(\"en-US\", {month: 'numeric', day: 'numeric', timeZone: \"UTC\"}),\n                cases: val.cases,\n                casesPerThousand: val.casesPerThousand,\n                deaths: val.deaths,\n                deathsPerThousand: val.deathsPerThousand,\n                deathsPerCase: val.deathsPerCase\n            });\n            return acc;\n        }, []);\n    }\n    return (\n        <div className=\"row\">\n            <div className=\"col-12\">\n                {countyData ? (\n                    <>\n                    <h2>{latestDatum.county} County, {latestDatum.state}</h2>\n                    <table className=\"table\">\n                        <tbody>\n                            <tr>\n                                <th>Last updated:</th>\n                                <td>{latestDatum.date.toLocaleDateString(\"en-US\", {timeZone: \"UTC\"})}</td>\n                            </tr>\n                            <tr>\n                                <th>Cases:</th>\n                                <td>{latestDatum.cases}</td>\n                            </tr>\n                            <tr>\n                                <th>Cases per thousand:</th>\n                                <td>{latestDatum.casesPerThousand.toFixed(2)}</td>\n                            </tr>\n                            <tr>\n                                <th>Deaths:</th>\n                                <td>{latestDatum.deaths}</td>\n                            </tr>\n                            <tr>\n                                <th>Deaths per thousand:</th>\n                                <td>{latestDatum.deathsPerThousand.toFixed(2)}</td>\n                            </tr>\n                            <tr>\n                                <th>Fatality Rate*:</th>\n                                <td>{((latestDatum.deaths / latestDatum.cases) * 100).toFixed(2)}%</td>\n                            </tr>\n                            <tr>\n                                <th>Population (2019):</th>\n                                <td>{latestDatum.population}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <div>\n                        <VictoryChart\n                            theme={VictoryTheme.material}>\n                            <VictoryBar\n                                data={graphData}\n                                x=\"date\"\n                                y=\"cases\" />\n                            <VictoryAxis label=\"Cases\" dependentAxis={true} padding={{bottom: 100}}/>\n                            <VictoryAxis tickCount={4}/>\n                        </VictoryChart>\n                    </div>\n                    <div>\n                        <VictoryChart\n                            theme={VictoryTheme.material}>\n                            <VictoryBar\n                                data={graphData}\n                                x=\"date\"\n                                y=\"casesPerThousand\" />\n                            <VictoryAxis label=\"Cases/1k\" dependentAxis={true}/>\n                            <VictoryAxis tickCount={4}/>\n                        </VictoryChart>\n                    </div>\n                    <div>\n                        <VictoryChart\n                            theme={VictoryTheme.material}>\n                            <VictoryBar\n                                data={graphData}\n                                x=\"date\"\n                                y=\"deaths\" />\n                            <VictoryAxis label=\"Deaths\" dependentAxis={true}/>\n                            <VictoryAxis tickCount={4}/>\n                        </VictoryChart>\n                    </div>\n                    <div>\n                        <VictoryChart\n                            theme={VictoryTheme.material}>\n                            <VictoryBar\n                                data={graphData}\n                                x=\"date\"\n                                y=\"deathsPerThousand\" />\n                            <VictoryAxis label=\"Deaths/1k\" dependentAxis={true}/>\n                            <VictoryAxis tickCount={4}/>\n                        </VictoryChart>\n                    </div>\n                    <div>\n                        <VictoryChart\n                            theme={VictoryTheme.material}>\n                            <VictoryBar\n                                data={graphData}\n                                x=\"date\"\n                                y={(datum) => datum.deathsPerCase * 100} />\n                            <VictoryAxis label=\"Fatality Rate\" dependentAxis={true}/>\n                            <VictoryAxis tickCount={4}/>\n                        </VictoryChart>\n                    </div>\n                    </>\n                ) : (\n                    <>\n                        <p>\n                            Select a county from the map to view Coronavirus case numbers.\n                        </p>\n                        <h2>About</h2>\n                        <p>\n                            This map visualizes COVID-19 cases in US counties.\n                            It uses data from the New York Times, based on\n                            reports from state and local health agencies. The New\n                            York Times' maps can be found <a href=\"https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html\">here</a>.\n                        </p>\n                        <h2>Licenses</h2>\n                        <p>\n                            The code for this project is licensed under GNU GPL\n                            v3.0. This site makes no warranty as to the\n                            accuracy of the data set, and is intended for\n                            informational purposes only. The data used is\n                            accessed under <a href=\"https://github.com/nytimes/covid-19-data\">license</a> by\n                            the New York Times.\n                        </p>\n                    </>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default Sidebar;\n","import React, { useState, useEffect } from 'react';\nimport Papa from 'papaparse';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport Nav from './components/Nav';\nimport Map from './components/Map';\nimport Sidebar from './components/Sidebar';\n\ntype FipsCasesMap = {\n    date: Date,\n    state: string,\n    county: string,\n    population: number\n    cases: number,\n    casesPerThousand: number,\n    deaths: number,\n    deathsPerThousand: number,\n    deathsPerCase: number\n}\n\nexport type MappedData = 'cases' | 'casesPerK' | 'deaths' | 'deathsPerK' | 'deathsPerCase';\n\ntype MapDataControlsProps = {\n    mappedData: MappedData,\n    setMappedData: React.Dispatch<React.SetStateAction<MappedData>>\n}\n\nconst MapDataControls = ({mappedData, setMappedData}: MapDataControlsProps) => {\n    const handleMapDataOption = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setMappedData(e.target.value as MappedData);\n    }\n    return (\n        <div id={'map-data-controls'}>\n            <div className='form-check'>\n                <input\n                    className='form-check-input'\n                    type='radio'\n                    name='mapped-data'\n                    id='mapped-data-casesK'\n                    value='casesPerK'\n                    checked={mappedData === 'casesPerK' ? true : false}\n                    onChange={handleMapDataOption}/>\n                <label className='form-check-label' htmlFor=\"mapped-data-casesK\">Cases/1K</label>\n            </div>\n            <div className='form-check'>\n                <input\n                    className='form-check-input'\n                    type='radio'\n                    name='mapped-data'\n                    id='mapped-data-cases'\n                    value='cases'\n                    checked={mappedData === 'cases' ? true : false}\n                    onChange={handleMapDataOption}/>\n                <label className='form-check-label' htmlFor=\"mapped-data-cases\">Cases</label>\n            </div>\n            <div className='form-check'>\n                <input\n                    className='form-check-input'\n                    type='radio'\n                    name='mapped-data'\n                    id='mapped-data-deathsK'\n                    value='deathsPerK'\n                    checked={mappedData === 'deathsPerK' ? true : false}\n                    onChange={handleMapDataOption}/>\n                <label className='form-check-label' htmlFor=\"mapped-data-deathsK\">Deaths/1K</label>\n            </div>\n            <div className='form-check'>\n                <input\n                    className='form-check-input'\n                    type='radio'\n                    name='mapped-data'\n                    id='mapped-data-deaths'\n                    value='deaths'\n                    checked={mappedData === 'deaths' ? true : false}\n                    onChange={handleMapDataOption}/>\n                <label className='form-check-label' htmlFor=\"mapped-data-deaths\">Deaths</label>\n            </div>\n            <div className='form-check'>\n                <input\n                    className='form-check-input'\n                    type='radio'\n                    name='mapped-data'\n                    id='mapped-data-deathsPerCase'\n                    value='deathsPerCase'\n                    checked={mappedData === 'deathsPerCase' ? true : false}\n                    onChange={handleMapDataOption}/>\n                <label className='form-check-label' htmlFor=\"mapped-data-deaths\">Fatality Rate</label>\n            </div>\n        </div>\n    )\n}\n\nconst MapContainer = () => {\n    const [countyData, setCountyData] = useState();\n    const [fipsToCases, setFipsToCases] = useState();\n    const [maxCases, setMaxCases] = useState();\n    const [maxCasesPerT, setMaxCasesPerT] = useState();\n    const [maxDeaths, setMaxDeaths] = useState();\n    const [maxDeathsPerT, setMaxDeathsPerT] = useState();\n    const [maxDeathsPerCase, setMaxDeathsPerCase] = useState();\n    const [activeCounty, setActiveCounty] = useState<string>();\n    const [mappedData, setMappedData] = useState<MappedData>('casesPerK');\n\n    const ratePerThousand = (cases: number, population: number): number => {\n        if (population === 0) {\n            return 0;\n        }\n        return (cases * 1000) / population;\n    }\n\n\n    useEffect(() => {\n        const BRONX = '36005';\n        const NEW_YORK = '36061';\n        const QUEENS = '36081';\n        const KINGS = '36047';\n        const RICHMOND = '36085';\n        const NYC = [BRONX, NEW_YORK, QUEENS, KINGS, RICHMOND];\n\n        let getData = async () => {\n            // County GeoJSON\n            let cResponse = await fetch('/data/county.json')\n            if (!cResponse.ok) {\n                throw new Error('HTTP Error: county GeoJSON not loaded');\n            }\n            let cData = await cResponse.json();\n\n            // Virus Counts\n            let vResponse = await fetch('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv');\n            if (!vResponse.ok) {\n                throw new Error('HTTP Error: case counts not loaded');\n            }\n            let vCsvString = await vResponse.text();\n            let {data, errors, meta} = Papa.parse(vCsvString, {header: true});\n\n            // Census Data\n            let censusResponse = await fetch('/data/census.csv');\n            if (!censusResponse.ok) {\n                throw new Error('HTTP Error: census data not loaded');\n            }\n            let censusCsvString = await censusResponse.text();\n            let {data: censusData} = Papa.parse(censusCsvString, {header: true});\n            let censusLookupTable = censusData.reduce((acc: any, val: any) => {\n                acc[val.GEOID] = Number(val.POPESTIMATE2019);\n                return acc;\n            }, {});\n\n            // You need to relate a FIPS to the most recent count\n            // You also need to annotate the GeoJSON with case numbers\n\n            // Iterate over the cases array, for each update an object\n            // where the key is the FIPS number as a string, and the value is\n            // the number of cases\n\n            // Then iterate over the GeoJSON, and annotate with case numbers by looking up the fips\n            // TODO: implement types\n            let _maxCases = 0;\n            let _maxCasesPerThousand = 0;\n            let _maxDeaths = 0;\n            let _maxDeathsPerThousand = 0;\n            let _maxDeathsPerCase = 0;\n            let fipsToCasesTable = data.reduce((acc: any, val: any) => {\n                // Ignore Unknown\n                if (val.county === 'Unknown') {\n                    return acc;\n                }\n                // Special case for NYC\n                let fips = val.county === 'New York City' ? '99999' : val.fips;\n\n                let d = new Date(val.date);\n                let population = censusLookupTable[fips];\n                let cases = Number(val.cases);\n                let casesPerThousand = ratePerThousand(cases, population);\n                let deaths = Number(val.deaths);\n                let deathsPerThousand = ratePerThousand(deaths, population);\n                let deathsPerCase = cases > 500 ? deaths / cases : 0;\n                \n                if (cases > _maxCases) {\n                    _maxCases = cases;\n                }\n                if (casesPerThousand > _maxCasesPerThousand) {\n                    _maxCasesPerThousand = casesPerThousand;\n                }\n                if (deaths > _maxDeaths) {\n                    _maxDeaths = deaths;\n                }\n                if (deathsPerThousand > _maxDeathsPerThousand) {\n                    _maxDeathsPerThousand = deathsPerThousand;\n                }\n                if (deathsPerCase > _maxDeathsPerCase) {\n                    _maxDeathsPerCase = deathsPerCase;\n                }\n\n\n                let datum: FipsCasesMap = {\n                    date: d,\n                    state: val.state,\n                    county: val.county,\n                    population: population,\n                    cases: cases,\n                    casesPerThousand: casesPerThousand,\n                    deaths: deaths,\n                    deathsPerThousand: deathsPerThousand,\n                    deathsPerCase: deathsPerCase\n                };\n\n                if (acc[fips]) {\n                    let idx = acc[fips].findIndex((el: FipsCasesMap) => el.date > d);\n                    if (idx < 0) {\n                        acc[fips].push(datum);\n                        return acc;\n                    }\n                    acc[fips].splice(idx, 0, datum);\n                    return acc;\n                }\n                acc[fips] = [datum];\n                return acc;\n            }, {});\n            setFipsToCases(fipsToCasesTable);\n            setMaxCases(_maxCases);\n            setMaxCasesPerT(_maxCasesPerThousand);\n            setMaxDeaths(_maxDeaths);\n            setMaxDeathsPerT(_maxDeathsPerThousand);\n            setMaxDeathsPerCase(_maxDeathsPerCase);\n\n            let annotatedFeatures = cData.features.map((val: any) => {\n                // Special case for NYC, rewrite GEOID to a non-valid FIPS number\n                // Use this to map information to the five boroughs\n                if (NYC.includes(val.properties.GEOID)) {\n                    val.properties.GEOID = '99999';\n                    val.properties['CASES'] = fipsToCasesTable['99999'] || null;\n                    return val;\n                }\n                val.properties['CASES'] = fipsToCasesTable[val.properties.GEOID] || null;\n                return val;\n            });\n            cData.features = annotatedFeatures;\n            setCountyData(cData);\n        }\n\n        getData();\n        console.log(maxDeathsPerCase);\n    }, []);\n\n    return (\n        <div id=\"map-container\" className=\"container-fluid\">\n            <div className=\"row\">\n                <div className=\"col-4\">\n                    <div className=\"container\">\n                        <Sidebar countyData={activeCounty ? fipsToCases[activeCounty] : null} />\n                    </div>\n                </div>\n                <div className=\"col-8 sidebar\">\n                    {countyData &&\n                    <>\n                    <MapDataControls\n                        mappedData={mappedData} \n                        setMappedData={setMappedData} />\n                    <Map countyData={countyData}\n                         maxCases={maxCases}\n                         maxCasesPerT={maxCasesPerT}\n                         maxDeaths={maxDeaths}\n                         maxDeathsPerT={maxDeathsPerT}\n                         maxDeathsPerCase={maxDeathsPerCase}\n                         activeCounty={activeCounty}\n                         setActiveCounty={setActiveCounty}\n                         mappedData={mappedData}/>\n                    </>\n                    }\n                </div>\n            </div>\n        </div>\n    )\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <div>\n            <Nav/>\n        </div>\n        <MapContainer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}